/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package my.matrixdashboard;

import java.util.*;
import javax.swing.*;

/**
 *
 * @author user1
 */
public class MatrixDashboardUI extends javax.swing.JFrame {

    static MatrixDashboardUI mdui;
    Database db;
    ArrayList<Project> projects;
    int ncurrentproject;
    ArrayList<AppArea> appareas;    // for current project
    int ncurrentapparea;
    ArrayList<AppFunc> appfuncs;    // for current project+apparea
    int ncurrentappfunc;
    ArrayList<Activity> activities;    // for current project
    
    /**
     * Creates new form MatrixDashboardUI
     */
    public MatrixDashboardUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jAppAreasComboBox1 = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jMainTable1 = new javax.swing.JTable();
        jProjectsComboBox1 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jAppAreasComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "AppArea 1", "AppArea 2", "AppArea 3", "AppArea 4" }));
        jAppAreasComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAppAreasComboBox1ActionPerformed(evt);
            }
        });

        jMainTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        }
        );
        jMainTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jMainTable1);
        if (jMainTable1.getColumnModel().getColumnCount() > 0) {
            jMainTable1.getColumnModel().getColumn(0).setResizable(false);
            jMainTable1.getColumnModel().getColumn(1).setResizable(false);
            jMainTable1.getColumnModel().getColumn(2).setResizable(false);
            jMainTable1.getColumnModel().getColumn(3).setResizable(false);
        }

        jProjectsComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Project 1", "Project 2", "Project 3", "Project 4" }));
        jProjectsComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jProjectsComboBox1ActionPerformed(evt);
            }
        });
        jProjectsComboBox1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jProjectsComboBox1PropertyChange(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jProjectsComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jAppAreasComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jAppAreasComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jProjectsComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 9, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jAppAreasComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAppAreasComboBox1ActionPerformed
        // TODO add your handling code here:
        //System.out.println("jAppAreasComboBox1ActionPerformed: called, evt == " + evt);        
        JComboBox comboBox = (JComboBox) evt.getSource();
        String selected = (String)(comboBox.getSelectedItem());
        System.out.println("jAppAreasComboBox1ActionPerformed: " + selected);

        for (int i=0 ; i<appareas.size() ; i++) {
            if (appareas.get(i).name.equals(selected)) {
                if (i != ncurrentapparea)
                    changeselectedapparea(i);
                return;
            }
        }
        System.out.println("jAppAreasComboBox1ActionPerformed: combobox selected apparea not in list");
    }//GEN-LAST:event_jAppAreasComboBox1ActionPerformed

    private void jProjectsComboBox1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jProjectsComboBox1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_jProjectsComboBox1PropertyChange

    private void jProjectsComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jProjectsComboBox1ActionPerformed

        //System.out.println("jProjectsComboBox1ActionPerformed: called, evt == " + evt);
        JComboBox comboBox = (JComboBox) evt.getSource();
        String selected = (String)(comboBox.getSelectedItem());
        System.out.println("jProjectsComboBox1ActionPerformed: " + selected);

        for (int i=0 ; i<projects.size() ; i++) {
            if (projects.get(i).name.equals(selected)) {
                if (i != ncurrentproject)
                    changeselectedproject(i);
                return;
            }
        }
        System.out.println("jProjectsComboBox1ActionPerformed: combobox selected project not in list");
    }//GEN-LAST:event_jProjectsComboBox1ActionPerformed

    private void createemptydatabase(){
        try{
            Activity.droptable();
        }catch(Exception e) {
        };
        try{
            Role.droptable();
        }catch(Exception e) {
        };
        try{
            Client.droptable();
        }catch(Exception e) {
        };
        try{
            OS.droptable();
        }catch(Exception e) {
        };
        try{
            Browser.droptable();
        }catch(Exception e) {
        };
        try{
            Device.droptable();
        }catch(Exception e) {
        };
        try{
            AppFunc.droptable();
        }catch(Exception e) {
        };
        try{
            AppArea.droptable();
        }catch(Exception e) {
        };
        try{
            Project.droptable();
        }catch(Exception e) {
        };

        try{
            Project.createtable();
        }catch(Exception e) {
        };
        try{
            AppArea.createtable();
        }catch(Exception e) {
        };
        try{
            AppFunc.createtable();
        }catch(Exception e) {
        };
        try{
            Device.createtable();
        }catch(Exception e) {
        };
        try{
            Browser.createtable();
        }catch(Exception e) {
        };
        try{
            OS.createtable();
        }catch(Exception e) {
        };
        try{
            Client.createtable();
        }catch(Exception e) {
        };
        try{
            Role.createtable();
        }catch(Exception e) {
        };
        try{
            Activity.createtable();
        }catch(Exception e) {
        };
    }                                                 

    private void createinitproject(){
        
        Project pInit = new Project(1,"Init");
        try{
            pInit.writetodatabase();
        }catch(Exception e) {
        };
        int nextid = 2;
        for ( ; nextid<4 ; nextid++) {
            Project p = new Project(nextid,"proj"+nextid);
            p.writetodatabase();
        }

        try{
            this.projects = Project.getallprojects();
        }catch(Exception e) {
        };
        ncurrentproject = 0;
       
        int nextaaid = 1;
        for (Project project : projects) {
            AppArea aaStandard = new AppArea(nextaaid++, project.id, "Standard" + project.id);
            try{
                aaStandard.writetodatabase();
            }catch(Exception e) {
            };
            AppArea aaCustom1 = new AppArea(nextaaid++, project.id, "Custom" + project.id);
            try{
                aaCustom1.writetodatabase();
            }catch(Exception e) {
            };
        }

        try{
            this.appareas = AppArea.getallappareas(this.projects.get(ncurrentproject).id);
        }catch(Exception e) {
        };
        ncurrentapparea = 0;
       
        int nextafid = 1;
        for (Project project : projects) {
            ArrayList<AppArea> appareas = new ArrayList<AppArea>();    // for project
            AppFunc af;
            try{
                appareas = AppArea.getallappareas(project.id);
            }catch(Exception e) {
            };
            for (AppArea apparea : appareas) {
                af = new AppFunc(nextafid++, project.id, apparea.id, "Login" + project.id + apparea.id);
                try{
                    af.writetodatabase();
                }catch(Exception e) {
                };
                af = new AppFunc(nextafid++, project.id, apparea.id, "Logout" + project.id + apparea.id);
                try{
                    af.writetodatabase();
                }catch(Exception e) {
                };
                af = new AppFunc(nextafid++, project.id, apparea.id, "PW Change" + project.id + apparea.id);
                try{
                    af.writetodatabase();
                }catch(Exception e) {
                };
                af = new AppFunc(nextafid++, project.id, apparea.id, "PW Reset" + project.id + apparea.id);
                try{
                    af.writetodatabase();
                }catch(Exception e) {
                };
            }
        }

        int nextrid = 1;
        Role r = null;
        r = new Role(nextrid++, "---none---");
        try{
            r.writetodatabase();
        }catch(Exception e) {
        };
        r = new Role(nextrid++, "User");
        try{
            r.writetodatabase();
        }catch(Exception e) {
        };
        r = new Role(nextrid++, "Admin");
        try{
            r.writetodatabase();
        }catch(Exception e) {
        };

        int nextdid = 1;
        Device d = null;
        d = new Device(nextdid++, "---none---");
        try{
            d.writetodatabase();
        }catch(Exception e) {
        };
        d = new Device(nextdid++, "PC");
        try{
            d.writetodatabase();
        }catch(Exception e) {
        };
        d = new Device(nextdid++, "Smartphone");
        try{
            d.writetodatabase();
        }catch(Exception e) {
        };

        int nextbid = 1;
        Browser b = null;
        b = new Browser(nextbid++, "---none---");
        try{
            b.writetodatabase();
        }catch(Exception e) {
        };
        b = new Browser(nextbid++, "Firefox");
        try{
            b.writetodatabase();
        }catch(Exception e) {
        };
        b = new Browser(nextbid++, "Chrome");
        try{
            b.writetodatabase();
        }catch(Exception e) {
        };

        int nextoid = 1;
        OS o = null;
        o = new OS(nextoid++, "---none---");
        try{
            o.writetodatabase();
        }catch(Exception e) {
        };
        o = new OS(nextoid++, "Linux");
        try{
            o.writetodatabase();
        }catch(Exception e) {
        };
        o = new OS(nextoid++, "Windows");
        try{
            o.writetodatabase();
        }catch(Exception e) {
        };

        int nextcid = 1;
        Client c = null;
        c = new Client(nextcid++, "PFL", 2, 2, 2);
        try{
            c.writetodatabase();
        }catch(Exception e) {
        };
        c = new Client(nextcid++, "SCW", 3, 3, 3);
        try{
            c.writetodatabase();
        }catch(Exception e) {
        };
       
        int nextaid = 1;
        for (Project project : projects) {
            Activity a = null;
            for (int i=0 ; i<10 ; i++) {
                a = new Activity(nextaid++, project.id, "Activity" + project.id + "-" + nextaid, (i%3)+1, (i%3)+1);
                try{
                    a.writetodatabase();
                }catch(Exception e) {
                };
            }
        }

        try{
            this.activities = Activity.getallactivities(this.projects.get(ncurrentproject).id);
        }catch(Exception e) {
        };
    }                                
    
    private void changeselectedproject(int nnewproject) {
        ncurrentproject = nnewproject;
        try{
            this.appareas = AppArea.getallappareas(this.projects.get(ncurrentproject).id);
        }catch(Exception e) {
        };
        setappareascomboboxcontents();
        
        try{
            this.activities = Activity.getallactivities(this.projects.get(ncurrentproject).id);
        }catch(Exception e) {
        };
        
        changeselectedapparea(0);   // this will redraw main table at end
    }                                
    
    private void changeselectedapparea(int nnewapparea) {
        ncurrentapparea = nnewapparea;
        try{
            this.appfuncs = AppFunc.getallappfuncs(this.projects.get(ncurrentproject).id, this.appareas.get(ncurrentapparea).id);
        }catch(Exception e) {
        };
        setmaintable();
    }                          
    
    private void setprojectscomboboxcontents() {
        String[] names = new String[40];
        int i = 0;
        for(Project project : this.projects)
            names[i++] = project.name;
        jProjectsComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(names));
    }                                
    
    private void setappareascomboboxcontents() {
        String[] names = new String[40];
        int i = 0;
        for(AppArea apparea : this.appareas)
            names[i++] = apparea.name;
        jAppAreasComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(names));
    }               
    
    private void setmaintable() {
        // tricky: column 0 is Activity labels
        int nrows = this.activities.size();
        int ncolumns = this.appfuncs.size()+1;
        
        Object [][] contents = new Object [nrows][ncolumns];
        String [] rowheaders = new String [nrows];
        String [] columnheaders = new String [ncolumns];
        
        for (int r=0 ; r<nrows ; r++)
            rowheaders[r] = new String(this.activities.get(r).name);
        columnheaders[0] = new String("");
        for (int c=1 ; c<ncolumns ; c++)
            columnheaders[c] = new String(this.appfuncs.get(c-1).name);
        for (int r=0 ; r<nrows ; r++)
            contents[r][0] = new String(rowheaders[r]);
        for (int r=0 ; r<nrows ; r++)
            for (int c=1 ; c<ncolumns ; c++)
                contents[r][c] = new String("cell" + r + c);
        
        jMainTable1.setModel(
          new javax.swing.table.DefaultTableModel(
            contents,
            columnheaders) {
                boolean[] canEdit = new boolean [] {
                    false, false, false, false
                };
                public boolean isCellEditable(int rowIndex, int columnIndex) {
                    return canEdit [columnIndex];
                }
            }
        );

    }
    
    private void start(){
        
        try{
            db = new Database();
        }catch(Exception e) {
        };
        
        try{
            db.open();
        }catch(Exception e) {
        };

        /*
        try{
            this.projects = Project.getallprojects();
        }catch(Exception e) {
        };
        */
        
        try{
            createemptydatabase();
        }catch(Exception e) {
        };
        try{
            createinitproject();
        }catch(Exception e) {
        };
        try{
            this.projects = Project.getallprojects();
        }catch(Exception e) {
        };
        setprojectscomboboxcontents();
        changeselectedproject(0);
    }

    private void stop(){
        
        try{
           db.close();
        }catch(Exception e) {
        };
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatrixDashboardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatrixDashboardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatrixDashboardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatrixDashboardUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mdui = new MatrixDashboardUI();
                mdui.start();
                mdui.setVisible(true);
            }
        });
        
        Runtime.getRuntime().addShutdownHook(new Thread(new Runnable() {
            public void run() {
                mdui.stop();
            }
        }));
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jAppAreasComboBox1;
    private javax.swing.JTable jMainTable1;
    private javax.swing.JComboBox<String> jProjectsComboBox1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
